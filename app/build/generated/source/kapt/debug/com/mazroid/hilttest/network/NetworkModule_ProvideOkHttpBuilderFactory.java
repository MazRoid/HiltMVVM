// Generated by Dagger (https://dagger.dev).
package com.mazroid.hilttest.network;

import com.mazroid.hilttest.MyApplication;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideOkHttpBuilderFactory implements Factory<OkHttpClient> {
  private final Provider<HttpLoggingInterceptor> loggerProvider;

  private final Provider<MyApplication> myApplicationProvider;

  public NetworkModule_ProvideOkHttpBuilderFactory(Provider<HttpLoggingInterceptor> loggerProvider,
      Provider<MyApplication> myApplicationProvider) {
    this.loggerProvider = loggerProvider;
    this.myApplicationProvider = myApplicationProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpBuilder(loggerProvider.get(), myApplicationProvider.get());
  }

  public static NetworkModule_ProvideOkHttpBuilderFactory create(
      Provider<HttpLoggingInterceptor> loggerProvider,
      Provider<MyApplication> myApplicationProvider) {
    return new NetworkModule_ProvideOkHttpBuilderFactory(loggerProvider, myApplicationProvider);
  }

  public static OkHttpClient provideOkHttpBuilder(HttpLoggingInterceptor logger,
      MyApplication myApplication) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideOkHttpBuilder(logger, myApplication));
  }
}
